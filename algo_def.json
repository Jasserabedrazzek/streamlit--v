{
    "Algorithms_exe": {
        "lire()": "#exe:\na = input('exemple: ')\n#output\n#exemple: ",
        "ecrire()": "#exe:\nprint('Hello , World!')\n#output Hello , World!",
        "<-": "#exe:\nnum = 19",
        "alors": "a = 19\nb = 12\n# en algo : si a <= b alors\n#en python : if a<= b :\nif a<= b :\n\tprint(a)",
        "si": "a = 19\nb = 12\n# en algo : si a <= b alors\n#en python : if a<= b :\nif a<= b :\n\tprint(a)",
        "valeur()": "#exe:\nn = int(input('donner un entier :')) # int:entier\nr = float(input('donner un reel :')) # float:reel",
        "entier": "#exe:\nn = int(input('donner un entier :')) # int:entier",
        "valeur": "#exe:\nn = int(input('donner un entier :')) # int:entier\nr = float(input('donner un reel :')) # float:reel",
        "entier()": "#exe:\nn = int(input('donner un entier :')) # int:entier",
        "reel": "#exe:\nr = float(input('donner un reel :')) # float:reel",
        "chaine de caracteres": "#exe:\nch = input('Entrer une chaine de caracteres : ')",
        "afficher": "#exe:\nprint('bacmath')  # => bacmath",
        "booleen": "#exe:\nres = True\nprint(res)",
        "faux": "#exe:\nres = False\nprint(res)",
        "vrai": "#exe:\nres = True\nprint(res)",
        "nombre entier": "integer number",
        "nombres reels": "real numbers (floating point)",
        "texte": "",
        "": "",
        "None": "",
        "div": "#exe:\na = 10 // 3\nprint(a)  # Output: 3",
        "mod": "#exe:\na = 10 % 3\nprint(a)  # Output: 1",
        "convch()": "#exe:\nn = 19\nch = str(n)\nprint(ch)  # => ch = '19'",
        "==": "#exe:\nif a == b :\n\tprint(True)",
        ">=": "#exe:\nif a >= b :\n\tprint(True)",
        "<=": "#exe:\nif a <= b :\n\tprint(True)",
        "!=": "#exe:\nif a != b :\n\tprint(True)",
        "non": "#exe:\nres = not True\nprint(res)  # Output: False",
        "et": "#exe:\nres = True and False\nprint(res)  # Output: False",
        "ou": "#exe:\nres = True or False\nprint(res)  # Output: True",
        "abs": "#exe:\nprint(abs(-15))  # Output: 15",
        "arrondi()": "#exe:\nprint(round(12.2))  # Output: 12",
        "alea": "#exe:\nfrom random import randint\nr = randint(1, 10)\nprint(r)  # exe: r = 5",
        "racine": "#exe:\nfrom math import sqrt\nprint(sqrt(x))  # exe: sqrt(16) = 4",
        "long": "#exe:\nprint(len('Bac Math'))  # Output: 8",
        "pos": "#exe:\nch = 'bac'\nf = ch.find('a')\nprint(f)  # Output: f = 1",
        "sous chaine": "#exe:\nch = 'bacmath'\nprint(ch[0:2])  # Output: ch[0:2] = 'bac'",
        "effacer": "#exe:\nch1 = 'bacmath'\nd = 1\nf = 2\nch2 = ch1[:d] + ch1[f:]\nprint(ch2)  # Output: 'bm' ",
        "majus": "#exe:\nM = 'bac'.upper()\nprint(M)  # Output: 'BAC'",
        "estnum": "#exe:\nch = '19'\nprint(ch.isnumeric())  # Output: True",
        "tab": "#exe:\nimport numpy as np\nn = int(input('Enter the size of the array (1 to 5): '))\nT = np.array([int] * n)   # n integer\nfor i in range(n):\n    T[i] = int(input(f'Enter element [{i}]: '))\nfor j in range(n):\n    print(T[j])  # To display the array elements",
        "tableau": "#exe:\nimport numpy as np\nn = int(input('Enter the size of the array (1 to 5): '))\nT = np.array([int] * n)   # n integer\nfor i in range(n):\n    T[i] = int(input(f'Enter element [{i}]: '))\nfor j in range(n):\n    print(T[j])  # To display the array elements",
        "boucle pour": "#exe:\nfor i in range(3):\n    print(i)\n    # i = 0\n    # i = 1\n    # i = 2",
        "pour": "#exe:\nfor i in range(3):\n    print(i)\n    # i = 0\n    # i = 1\n    # i = 2",
        "repeter": "#exe:\ni = 0\nwhile not i == 5:\n    i = i + 1\nprint(i) ",
        "tant que": "#exe:\ni = 0\nwhile not i == 5:\n    i = i + 1\nprint(i) ",
        "jusqu'a": "",
        "fonction": "#exe:\ndef somme(x):\n    x = 1 + 1\n    return x",
        "retourner": "return",
        "procedeur": "#exe:\ndef pro():\n    print('Python')"
    }
}
